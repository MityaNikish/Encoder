#include "pch.h"
#include <memory>
#include <string>
#include <random>
#include <exception>


class EncryptionMode
{
public:
	virtual ~EncryptionMode() = default;

	virtual std::string encryption(const std::string& str) const = 0;
	virtual std::string decryption(const std::string& str) const = 0;
};


class ElectronicCodebook final : public EncryptionMode
{
	unsigned char _key = 255;

public:
	ElectronicCodebook() = default;
	ElectronicCodebook::ElectronicCodebook(unsigned char key) : _key(key) {};
	ElectronicCodebook(const ElectronicCodebook&) = default;
	ElectronicCodebook& operator=(const ElectronicCodebook&) = default;
	~ElectronicCodebook() override = default;

	[[nodiscard]] std::string encryption(const std::string& str) const override
	{
		std::string new_str;
		for (const char _char : str)
		{
			new_str.push_back(static_cast<char>(_char ^ _key));
		}

		return new_str;
	}
	[[nodiscard]] std::string decryption(const std::string& str) const override
	{
		return encryption(str);
	}
};


class CipherBlockChaining final : public EncryptionMode
{
	unsigned char _key = 255;
	unsigned char def_init_vector = std::mt19937(std::random_device{}())() % 256;

public:
	CipherBlockChaining() = default;
	CipherBlockChaining::CipherBlockChaining(unsigned char key) : _key(key) {};
	CipherBlockChaining(const CipherBlockChaining&) = default;
	CipherBlockChaining& operator=(const CipherBlockChaining&) = default;
	~CipherBlockChaining() override = default;

	[[nodiscard]] std::string encryption(const std::string& str) const override
	{
		std::string new_str;
		unsigned char init_vector = def_init_vector;

		for (const char _char : str)
		{
			init_vector = algorithm(static_cast<char>(_char ^ init_vector));
			new_str.push_back(static_cast<char>(init_vector));
		}

		return new_str;
	}
	[[nodiscard]] std::string decryption(const std::string& str) const override
	{
		std::string new_str;
		unsigned char init_vector = algorithm(str[0]);

		new_str.push_back(static_cast<char>(def_init_vector ^ init_vector));

		for (int j = 0; j < str.length() - 1; j++)
		{
			init_vector = algorithm(str[j + 1]);
			new_str.push_back(static_cast<char>(str[j] ^ init_vector));
		}

		return new_str;
	}

private:
	unsigned char algorithm(unsigned char ch) const
	{
		return ch ^ _key;
	}
};


class Encoder final
{
public:
	void setEncoder(std::unique_ptr<EncryptionMode> strg)
	{
		mode = std::move(strg);
	}
	[[nodiscard]] std::string useEncryption(const std::string& str) const
	{
		if (mode)
		{
			return mode->encryption(str);
		}
		throw std::exception();
	}
	[[nodiscard]] std::string useDecryption(const std::string& str) const
	{
		if (mode)
		{
			return mode->decryption(str);
		}
		throw std::exception();
	}

protected:
	std::unique_ptr<EncryptionMode> mode;
};
